import { DynamoDBClient, ScanCommand } from "@aws-sdk/client-dynamodb";
import { PutObjectCommand, S3Client } from "@aws-sdk/client-s3"; // to communicate with s3 services // putobjectcommand to upload
import {
  DynamoDBDocumentClient,
  GetCommand,
  PutCommand,
} from "@aws-sdk/lib-dynamodb";
import { v4 } from "uuid"; // generate unique
const s3 = new S3Client(); // object of s3
const bucket = "ashish-upload-bucket"; // name of bucket
const db1 = "imagedb";
const db = "Database";
const client = new DynamoDBClient();
const doc = DynamoDBDocumentClient.from(client);
export const handler = async (event) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type",
    "Content-Type": "application/json",
  };
  const path = event.path;
  const method = event.httpMethod;
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers };
  }
  try {
    if (method === "POST" && path === "/api/image") {
      const { filename, filetype, base64, email } = JSON.parse(event.body); // filename : image.png filetype: image/png file encoded in base64.
      const buffer = Buffer.from(base64, "base64"); // convert base64 file into binary buffer
      const key = `${v4()}-${filename}`; // this genrated unique file name  ex. af8d13ea-photo.png
      await s3.send(
        new PutObjectCommand({
          Bucket: bucket, // bucket name
          Key: key, // unique key created
          Body: buffer, // file which is converted to binary
          ContentType: filetype, // file Type mime type
          ACL: "public-read", // this is attribute make file publically accessble via url
        })
      );
      const url = `https://${bucket}.s3.amazonaws.com/${key}`; // this url to accss data
      const news = {
        email: email,
        url: url,
        uploadedAt: new Date().toISOString(),
      };
      await doc.send(new PutCommand({ TableName: db1, Item: news }));
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ message: "Uploaded successfully" }),
      };
    }
    if (method === "GET" && path === "/api") {
      const r = await doc.send(new ScanCommand({ TableName: db }));
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify(r.Items),
      };
    }

    // POST /api/login
    if (method === "POST" && path === "/api/login") {
      const { email, password } = JSON.parse(event.body || "{}");

      if (!email || !password) {
        return {
          statusCode: 400,
          headers,
          body: JSON.stringify({ message: "Email and password are required" }),
        };
      }

      const r = await doc.send(
        new GetCommand({ TableName: db, Key: { email } })
      );

      if (!r.Item) {
        return {
          statusCode: 401,
          headers,
          body: JSON.stringify({ message: "User not found", t: "0" }),
        };
      }

      if (r.Item.password === password) {
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({ message: "Success", t: "1" }),
        };
      } else {
        return {
          statusCode: 404,
          headers,
          body: JSON.stringify({ message: "Incorrect password", t: "0" }),
        };
      }
    }
    if (method === "GET" && path === "/api/image") {
      const response = await doc.send(new ScanCommand({ TableName: db1 }));
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify(response.Items),
      };
    }
    // POST /api/register
    if (method === "POST" && path === "/api") {
      const data = JSON.parse(event.body || "{}");

      const { name, email, address, password, contact, dob } = data;
      if (!name || !email || !password) {
        return {
          statusCode: 400,
          headers,
          body: JSON.stringify({ message: "Missing required fields" }),
        };
      }

      const newUser = {
        name,
        email,
        address,
        password,
        contact,
        dob,
        updatedAt: new Date().toISOString(),
      };

      await doc.send(new PutCommand({ TableName: db, Item: newUser }));

      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ message: "User registered successfully" }),
      };
    }
    return {
      statusCode: 404,
      headers,
      body: JSON.stringify({ message: "Route not found" }),
    };
  } catch (err) {
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ Error: err.message }),
    };
  }
};
